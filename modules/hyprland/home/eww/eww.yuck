(defvar temp_shown false)

(defpoll net_name :interval "5s" "nmcli | grep ^wlo | sed 's/\ connected\ to\ //g' | cut -d ':' -f2")
(defpoll spercent :interval "1s" "wpctl get-volume @DEFAULT_AUDIO_SINK@ | sed 's/Volume: //;s/0.00/0/;s/0\\.//;s/\\.//;s/$/%/;s/.* //;s/]%/]/'")
(defpoll mpercent :interval "1s" "wpctl get-volume @DEFAULT_AUDIO_SOURCE@ | sed 's/Volume: //;s/0.00/0/;s/0\\.//;s/\\.//;s/$/%/;s/.* //;s/]%/]/'")
(deflisten workspaces :initial "[]" "bash ~/.config/eww/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ~/.config/eww/scripts/get-active-workspace")
(deflisten ctitle :initial "..." "sh ~/.config/eww/scripts/get-window-title")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
                      :y "0.5%"
                      :width "99.3%"
                      :height "3%"
                      :anchor "top center")
  :stacking "bottom"
  :exclusive true
  :focusable false
  :namespace "bar"
  (fullbar))

(defwidget fullbar []
  (box :orientation "h"
       :class "container"
       (leftbar)
       (title)
       (rightbar)))

(defwidget leftbar []
  (box :orientation "h"
       :halign "start"
       :class "leftbar"
       :space-evenly false
       :spacing 10
       (launcher)
       (workspaces)))

(defwidget rightbar []
  (box :orientation "h"
       :halign "end"
       :class "rightbar"
       :space-evenly false
       :spacing 10
       (tray)
       (datetime)))

(defwidget launcher []
  (box :orientation "h"
       :class "launcher"
       (button :onclick 'fuzzel &' " ")))

(defwidget title []
  (box :orientation "h"
       :class "title"
       "${ctitle}"))

(defwidget network []
  (box :class "internet"
       :space-evenly false
       :visible {net_name == "" ? false : true}
       (label :class "icon"
              :text "󰈀   ${net_name}")))

(defwidget customtray []
  (box :class "customicons"
       :orientation "h"
       :space-evenly false
       (audioinfo)
       (tempinfo)))

(defwidget audioinfo []
  (box :class "audioinfo"
       :orientation "h"
       :space-evenly false
       (revealer :transition "slideright"
                 :reveal "${!temp_shown}"
                 (network))
       (revealer :transition "slideright" :reveal "${!temp_shown}"
                 (label :class "vol" :text "   ${spercent}"))
       (revealer :transition "slideright" :reveal "${!temp_shown}"
                 (label :class "mic" :text " ${mpercent}"))))

(defwidget tempinfo []
  (eventbox :onhover "${EWW_CMD} update temp_shown=true"
            :onhoverlost "${EWW_CMD} update temp_shown=false"
            (box :class "tempinfo"
                 :orientation "h"
                 :space-evenly false
                 :hexpand true
                 (revealer :transition "slideright" :reveal "${!temp_shown}"
                           (label :class "arrow" :text " "))
                 (revealer :transition "slideleft" :reveal temp_shown
                           (label :class "ram" :text "   ${round(EWW_RAM.used_mem_perc, 1)}%"))
                 (revealer :transition "slideleft" :reveal temp_shown
                           (label :class "storage" :text "   ${round(EWW_DISK["/"].used_perc, 1)}%"))
                 (revealer :transition "slideleft" :reveal temp_shown
                           (label :class "cputemp" :text "   ${round(EWW_TEMPS.K10TEMP_TCTL, 1)}C"))
                 (revealer :transition "slideleft" :reveal temp_shown
                           (label :class "gputemp" :text "   ${round(EWW_TEMPS.AMDGPU_EDGE, 1)}C"))
                 (revealer :transition "slideleft" :reveal temp_shown
                           (label :class "arrow" :text " ")))))

(defwidget tray []
  (box :class "sidestuff" :orientation "h" :space-evenly false :spacing  10
       (systray :class "systray" :orientation "h" :spacing 10)
       (customtray)))

(defwidget datetime []
  (box :orientation "h"
       :class "datetime"
       :space-evenly false
       :spacing 10
       (tooltip :class "tooltip"
                (calendar :class "calendar"
                          :day {formattime(EWW_TIME, "%d")})
                (label :class "date"
                       :text {formattime(EWW_TIME, "%a, %d %b")}))
       (label :class "time"
              :text {formattime(EWW_TIME, "%I:%M %p")})))

(defwidget workspaces []
  (eventbox :onscroll "bash ~/.config/eww/scripts/change-active-workspace {} ${current_workspace}"
            (box :space-evenly false
                 :spacing 8
                 :class "workspaces-widget"
                 (label :text "${workspaces}${current_workspace}"
                        :visible false)
                 (for workspace in workspaces
                      (eventbox :class "workspace-e"
                                :onclick "hyprctl dispatch workspace ${workspace.id}"
                                (box :class "workspace ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                                     (label :text "${workspace.id}")))))))
